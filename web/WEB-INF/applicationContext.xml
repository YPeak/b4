<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.2.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
       http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">



    <!--将包中所有的接口当做mapper配置，之后可以自动引入mapper类-->
    <mybatis:scan base-package="com.mapper"/>

    <!--&lt;!&ndash; 加载外部的properties配置文件（引入jdbc的配置文件） &ndash;&gt;-->
    <!--<context:property-override location="classpath:db.properties"/>-->


    <!-- 配置组件扫描器，使用注解方式开发,不用配置dao和service -->
    <!-- 在springmvc.xml文件中也可以配置这个属性 -->
    <context:component-scan base-package="com.service" />

    <!-- 数据源 -->
    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/shaoqing" />
        <property name="username" value="root" />
        <property name="password" value="tiger" />
    </bean>

    <!-- 配置session工厂 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"  p:dataSource-ref="dataSource"/>
        <!--<property name="dataSource" ref="dataSource"/>-->
        <!--<property name="configLocation" value="classpath:mybatis-config.xml"/>-->
    <!--</bean>-->

    <!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" p:dataSource-ref="dataSource"/>
        <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->

    <!-- 配置AOP通知 -->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
        <!--&lt;!&ndash; 配置事务属性 &ndash;&gt;-->
        <!--<tx:attributes>-->
            <!--&lt;!&ndash; 添加事务管理的方法 &ndash;&gt;-->
            <!--<tx:method name="save*" propagation="REQUIRED"/>-->
            <!--<tx:method name="delete*" propagation="REQUIRED"/>-->
            <!--<tx:method name="update*" propagation="REQUIRED"/>-->
            <!--<tx:method name="select*" read-only="true"/>-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--&lt;!&ndash; 配置AOP，为添加事务管理的操作配置AOP &ndash;&gt;-->
    <!--<aop:config>-->
        <!--&lt;!&ndash; 引入的Spring定义的事务通知，需要使用aop:advisor &ndash;&gt;-->
        <!--&lt;!&ndash; 下面难 &ndash;&gt;-->
        <!--<aop:advisor advice-ref="txAdvice"-->
                     <!--pointcut="execution(* com.edu.test.service.*.*(..))"-->
        <!--/>-->
    <!--</aop:config>-->
</beans>